// app/api/cron/check-event-start/route.ts
import { NextResponse } from "next/server";
//import { createServerClient } from "@/lib/supabase-server";
import { formatInTimeZone } from 'date-fns-tz'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
import { createServiceRoleClient } from "@/lib/supabase-server"; 

export const dynamic = 'force-dynamic';

export async function GET(request: Request) {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞ (–µ—Å–ª–∏ –≤—ã –µ–µ –¥–æ–±–∞–≤–∏–ª–∏)
  const CRON_SECRET = process.env.CRON_SECRET;
  const providedSecret = request.headers.get('Authorization')?.replace('Bearer ', '');

  if (CRON_SECRET && providedSecret !== CRON_SECRET) {
    console.warn("Cron job: Unauthorized access attempt.");
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  try {
    const supabase = createServiceRoleClient();
    console.log("üîÑ Checking for events starting now (target timezone: UTC+2)...");

    const targetTimeZone = 'Europe/Berlin'; // –ü—Ä–∏–º–µ—Ä –¥–ª—è UTC+2 (–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–µ –≤—Ä–µ–º—è)
                                          // –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é IANA —Ç–∞–π–º–∑–æ–Ω—É –¥–ª—è UTC+2,
                                          // –Ω–∞–ø—Ä–∏–º–µ—Ä, 'Europe/Paris', 'Europe/Warsaw', 'Africa/Cairo'
                                          // –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'Etc/GMT-2' (–æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∏–Ω–≤–µ—Ä—Å–∏—é –∑–Ω–∞–∫–∞ –¥–ª—è Etc/GMT)

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (—ç—Ç–æ –±—É–¥–µ—Ç UTC)
    const nowUtc = new Date();

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ UTC –≤—Ä–µ–º—è –≤ —Ü–µ–ª–µ–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å UTC+2
    // –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    const currentTimeInTargetTZ = formatInTimeZone(nowUtc, targetTimeZone, 'HH:mm');
    const currentDateInTargetTZ = formatInTimeZone(nowUtc, targetTimeZone, 'yyyy-MM-dd');

    console.log(`Current time in ${targetTimeZone} (UTC+2 equivalent): ${currentDateInTargetTZ} ${currentTimeInTargetTZ}`);
    console.log(`(Server UTC time was: ${nowUtc.toISOString()})`);


    const { data: events, error } = await supabase
        .from("events")
        .select(`
        *,
        users!inner(telegram_chat_id, reminder_notifications_enabled)
      `)
        .eq("event_date", currentDateInTargetTZ) // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –¥–∞—Ç–æ–π –≤ UTC+2
        .eq("start_time", currentTimeInTargetTZ) // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –≤ UTC+2
        .eq("users.reminder_notifications_enabled", true)
        .not("users.telegram_chat_id", "is", null);

    if (error) {
      console.error("Database error:", error);
      return NextResponse.json({ error: "Database error", details: error.message }, { status: 500 });
    }

    console.log(`Found ${events?.length || 0} events starting now in ${targetTimeZone}`);

    if (!events || events.length === 0) {
      return NextResponse.json({
        success: true,
        message: `No events starting at this time in ${targetTimeZone}`,
        count: 0,
        currentTime: `${currentDateInTargetTZ} ${currentTimeInTargetTZ}`,
      });
    }

    let successCount = 0;
    let errorCount = 0;

    for (const event of events) {
      const telegramChatId = event.users?.telegram_chat_id;

      if (!telegramChatId) {
        console.log(`‚ö†Ô∏è Skipping event ${event.id}: no Telegram chat ID or user relation`);
        errorCount++;
        continue;
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º event.event_date, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
      // –∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ –¥–∞—Ç–∞ –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ (UTC+2)
      const eventDateForDisplay = new Date(`${event.event_date}T00:00:00`); // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –±–µ–∑ —É—á–µ—Ç–∞ TZ, —á—Ç–æ–±—ã toLocaleDateString —Å—Ä–∞–±–æ—Ç–∞–ª–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      
      const message = `
üöÄ <b>Event Starting Now!</b>

üìÖ <b>${event.title}</b>

‚è∞ <b>Time:</b> ${event.start_time}${event.end_time ? ` - ${event.end_time}` : ""} (UTC+2)
üóì <b>Date:</b> ${eventDateForDisplay.toLocaleDateString("en-US", { // –∏–ª–∏ "de-DE", "fr-FR" –∏ —Ç.–¥. –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        weekday: "long",
        year: "numeric",
        month: "long",
        day: "numeric",
      })}${event.location ? `\nüìç <b>Location:</b> ${event.location}` : ""}${event.description ? `\n\nüìù <b>Description:</b> ${event.description}` : ""}

üéØ <i>Your event is starting right now!</i>
      `.trim();

      const telegramResponse = await fetch(
          `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              chat_id: telegramChatId,
              text: message,
              parse_mode: "HTML",
            }),
          },
      );

      if (telegramResponse.ok) {
        console.log(`‚úÖ Start notification sent for event: ${event.title}`);
        successCount++;
      } else {
        const errorText = await telegramResponse.text();
        console.error(`‚ùå Failed to send Telegram notification for event ${event.id}:`, errorText);
        errorCount++;
      }
    }

    console.log(`‚úÖ Check completed: ${successCount} notifications sent, ${errorCount} errors`);

    return NextResponse.json({
      success: true,
      message: `Processed ${events.length} events starting now in ${targetTimeZone}`,
      successCount,
      errorCount,
      currentTime: `${currentDateInTargetTZ} ${currentTimeInTargetTZ}`,
      events: events.map((e: any) => ({ id: e.id, title: e.title, start_time: e.start_time })),
    });
  } catch (error: any) {
    console.error("‚ùå Event start check error:", error);
    return NextResponse.json(
        { error: "Internal server error", details: error.message || "Unknown error" },
        { status: 500 },
    );
  }
}
