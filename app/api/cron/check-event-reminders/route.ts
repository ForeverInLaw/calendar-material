// /app/api/cron/check-event-reminders/route.ts
import { NextResponse } from "next/server";
import { createServiceRoleClient } from "@/lib/supabase-server"; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è
import { formatInTimeZone, toDate, zonedTimeToUtc, utcToZonedTime } from 'date-fns-tz';
import { parseISO, addMinutes, parse } from 'date-fns';
// `parseISO` –∏ `toDate` –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã –¥–ª—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ–π —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏.
// `parse` –∏–∑ 'date-fns-tz' (–∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø—Ä–∏–º–µ—Ä–µ) —Ç–æ–∂–µ –ø–æ–¥–æ–π–¥–µ—Ç, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω.

export const dynamic = 'force-dynamic';

export async function GET(request: Request) {
  const CRON_SECRET = process.env.CRON_SECRET;
  const providedSecret = request.headers.get('Authorization')?.replace('Bearer ', '');

  if (CRON_SECRET && providedSecret !== CRON_SECRET) {
    console.warn("Event Reminders Cron: Unauthorized access attempt.");
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  try {
    const supabase = createServiceRoleClient();
    const targetTimeZone = process.env.TARGET_TIMEZONE || 'Europe/Berlin'; // –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ ENV
    console.log(`üîÑ [REMINDERS] Checking for event reminders (target timezone: ${targetTimeZone})...`);

    const nowUtc = new Date(); // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ (UTC)
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ UTC –≤—Ä–µ–º—è –≤ –æ–±—ä–µ–∫—Ç Date, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –≤—Ä–µ–º—è –≤ —Ü–µ–ª–µ–≤–æ–π —Ç–∞–π–º–∑–æ–Ω–µ
    const currentDateTimeInTargetTZObject = toDate(nowUtc, { timeZone: targetTimeZone });

    console.log(`[REMINDERS] Current datetime in ${targetTimeZone}: ${formatInTimeZone(currentDateTimeInTargetTZObject, targetTimeZone, 'yyyy-MM-dd HH:mm:ssXXX')}`);
    console.log(`[REMINDERS] (Server UTC time was: ${nowUtc.toISOString()})`);

    const { data: events, error } = await supabase
      .from("events")
      .select(`
        id,
        title,
        description,
        event_date,
        start_time,
        end_time,
        location,
        reminder_minutes,
        users!inner(telegram_chat_id, reminder_notifications_enabled)
      `)
      .eq("reminder_sent", false)
      .gt("reminder_minutes", 0)
      .not("users.telegram_chat_id", "is", null)
      .eq("users.reminder_notifications_enabled", true);

    if (error) {
      console.error("[REMINDERS] Database error fetching events for reminders:", error);
      return NextResponse.json({ error: "Database error", details: error.message }, { status: 500 });
    }

    if (!events || events.length === 0) {
      console.log("[REMINDERS] No pending reminders to check at this moment.");
      return NextResponse.json({ success: true, message: "No pending reminders." });
    }

    console.log(`[REMINDERS] Found ${events.length} events with pending reminders to evaluate.`);
    let successCount = 0;
    let errorCount = 0;
    const eventsToUpdateReminderSent = [];

    for (const event of events) {
      let eventStartDateTimeInTargetTZ: Date; // –≠—Ç–æ –±—É–¥–µ—Ç –æ–±—ä–µ–∫—Ç Date, —á—å–∏ "–ª–æ–∫–∞–ª—å–Ω—ã–µ" –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç targetTimeZone
      let eventStartDateTimeUtc: Date;      // –≠—Ç–æ –±—É–¥–µ—Ç –æ–±—ä–µ–∫—Ç Date, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Ç–æ—Ç –∂–µ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏, –Ω–æ –≤ UTC
      try {
            const dateTimeStringFromDb = `${event.event_date} ${event.start_time}`;
            let baseFormat = 'yyyy-MM-dd HH:mm';
            if (event.start_time && event.start_time.split(':').length === 3) {
                baseFormat = 'yyyy-MM-dd HH:mm:ss';
            }

            // –®–∞–≥ 1: –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –∏–∑ –ë–î, –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤ targetTimeZone.
            // `parse` (–∏–∑ date-fns) —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç Date. –≠—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –±—É–¥–µ—Ç –∏–º–µ—Ç—å UTC-—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç,
            // –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ —Å–µ—Ä–≤–µ—Ä–∞, –ï–°–õ–ò –º—ã –Ω–µ —Å–∫–∞–∂–µ–º –µ–º—É –∏–Ω–æ–µ.
            // –ß—Ç–æ–±—ã —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–ª–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å `date-fns-tz`, –º—ã –¥–æ–ª–∂–Ω—ã —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç Date,
            // –∫–æ—Ç–æ—Ä—ã–π *–ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç* –Ω—É–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏.
            
            // `zonedTimeToUtc` –±–µ—Ä–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Date –æ–±—ä–µ–∫—Ç –≤ UTC.
            // `utcToZonedTime` –±–µ—Ä–µ—Ç UTC Date –æ–±—ä–µ–∫—Ç –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Date –æ–±—ä–µ–∫—Ç –≤ —ç—Ç–æ–π –∑–æ–Ω–µ.

            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±:
            // 1. –°–æ–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫—É.
            // 2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É + —Ç–∞–π–º–∑–æ–Ω—É –∏ –¥–∞–µ—Ç UTC –æ–±—ä–µ–∫—Ç Date.
            //    –∏–ª–∏ –ø–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –∫–∞–∫ "–ª–æ–∫–∞–ª—å–Ω—É—é –¥–ª—è –∑–æ–Ω—ã" –∏ –¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç Date, —á—å–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ —ç—Ç–æ–π –∑–æ–Ω–µ.

            // –ü–æ–ø—Ä–æ–±—É–µ–º —Ç–∞–∫:
            // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Date, –∫–∞–∫ –±—É–¥—Ç–æ —á–∏—Å–ª–∞ –∏–∑ event_date –∏ start_time —è–≤–ª—è—é—Ç—Å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ UTC –¥–∞—Ç—ã
            const [year, month, day] = event.event_date.split('-').map(Number);
            const [hour, minute, second = 0] = event.start_time.split(':').map(Number);
            
            // –°–æ–∑–¥–∞–µ–º UTC –¥–∞—Ç—É –∏–∑ —ç—Ç–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤. Month –≤ JS Date —Å 0.
            const utcDateFromComponents = new Date(Date.UTC(year, month - 1, day, hour, minute, second));
            console.log(`[REMINDERS] Step 0 - UTC Date from components: ${utcDateFromComponents.toISOString()}`);


            // –¢–µ–ø–µ—Ä—å, –µ—Å–ª–∏ –º—ã —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ YYYY-MM-DD HH:MM:SS –∏–∑ –±–∞–∑—ã - —ç—Ç–æ –£–ñ–ï –≤—Ä–µ–º—è –≤ targetTimeZone (UTC+2),
            // —Ç–æ utcDateFromComponents (03:57Z) –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û. –ù–∞–º –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã 03:57 –≤ UTC+2 —Å—Ç–∞–ª–æ 01:57Z.
            
            // –ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥:
            const dateString = event.event_date;
            const timeString = event.start_time.split(':').length === 2 ? event.start_time + ':00' : event.start_time;

            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Date, –∫–æ—Ç–æ—Ä—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç "–Ω–∞—Å—Ç–µ–Ω–Ω–æ–µ" –≤—Ä–µ–º—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–æ–Ω–µ.
            // `parse` –∏–∑ date-fns-tz (–µ—Å–ª–∏ –±—ã –æ–Ω–∞ –±—ã–ª–∞) –±—ã–ª–∞ –±—ã –∏–¥–µ–∞–ª—å–Ω–∞.
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º `parse` –∏–∑ `date-fns` –∏ `toDate` –∏–∑ `date-fns-tz`
            
            const tempParsedDate = parse(`${dateString} ${timeString}`, 'yyyy-MM-dd HH:mm:ss', new Date());
            if (isNaN(tempParsedDate.getTime())) {
                console.error(`[REMINDERS] Initial parse failed for "${dateString} ${timeString}"`);
                throw new Error("Initial parse failed");
            }
            // tempParsedDate —Ç–µ–ø–µ—Ä—å –æ–±—ä–µ–∫—Ç Date, –∫–æ—Ç–æ—Ä—ã–π JavaScript –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º TZ —Å–µ—Ä–≤–µ—Ä–∞.
            // –ù–∞–º –Ω—É–∂–Ω–æ "—Å–∫–∞–∑–∞—Ç—å", —á—Ç–æ —ç—Ç–∏ —Ü–∏—Ñ—Ä—ã –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ targetTimeZone.
            
            // eventStartDateTimeInTargetTZ –±—É–¥–µ—Ç –æ–±—ä–µ–∫—Ç–æ–º Date, —á—å–∏ .getHours() –∏ —Ç.–¥. –±—É–¥—É—Ç –≤ targetTimeZone
            eventStartDateTimeInTargetTZ = toDate(tempParsedDate, { timeZone: targetTimeZone });
            // –ù–û! –ï—Å–ª–∏ tempParsedDate –±—ã–ª–æ 03:57 (—Å–µ—Ä–≤–µ—Ä–Ω–æ–µ UTC), —Ç–æ toDate(..., {timeZone: 'Europe/Berlin'})
            // –¥–∞—Å—Ç –Ω–∞–º –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏ –≤—ã–∑–æ–≤–µ getHours() –≤–µ—Ä–Ω–µ—Ç 5, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤ UTC.
            // –≠—Ç–æ –Ω–µ —Ç–æ, —á—Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ.

            // **–°–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±, –µ—Å–ª–∏ event_date –∏ start_time - —ç—Ç–æ "–Ω–∞—Å—Ç–µ–Ω–Ω–æ–µ" –≤—Ä–µ–º—è –≤ targetTimeZone:**
            const ianaTimeZone = targetTimeZone; // 'Europe/Berlin'
            const dateTimeStrForZone = `${event.event_date}T${timeString}`; // "2025-06-02T03:57:00"
            
            // zonedTimeToUtc: –±–µ—Ä–µ—Ç "–Ω–∞—Å—Ç–µ–Ω–Ω–æ–µ" –≤—Ä–µ–º—è –∏ –∑–æ–Ω—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã–π UTC Date –æ–±—ä–µ–∫—Ç.
            // –ù–∞–ø—Ä–∏–º–µ—Ä, "2025-06-02T03:57:00" –≤ "Europe/Berlin" (UTC+2) —Å—Ç–∞–Ω–µ—Ç 2025-06-02T01:57:00Z.
            eventStartDateTimeUtc = zonedTimeToUtc(dateTimeStrForZone, ianaTimeZone);
            
            // utcToZonedTime: –±–µ—Ä–µ—Ç UTC Date –æ–±—ä–µ–∫—Ç –∏ –∑–æ–Ω—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "–Ω–∞—Å—Ç–µ–Ω–Ω–æ–µ" –≤—Ä–µ–º—è –≤ —ç—Ç–æ–π –∑–æ–Ω–µ.
            // –≠—Ç–æ –±—É–¥–µ—Ç –æ–±—ä–µ–∫—Ç Date, —É –∫–æ—Ç–æ—Ä–æ–≥–æ getHours() –≤–µ—Ä–Ω–µ—Ç 3 –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞, –µ—Å–ª–∏ –≤—ã–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å
            // –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —É—á–µ—Ç–æ–º —ç—Ç–æ–π –∑–æ–Ω—ã.
            eventStartDateTimeInTargetTZ = utcToZonedTime(eventStartDateTimeUtc, ianaTimeZone);


            if (isNaN(eventStartDateTimeInTargetTZ.getTime())) {
                console.error(`[REMINDERS] Final date conversion resulted in NaN for event ${event.id}`);
                throw new Error("Final date conversion resulted in NaN");
            }
            console.log(`[REMINDERS] Event: "${event.title}" (ID: ${event.id})`);
            console.log(`  DB Date: ${event.event_date}, DB Time: ${event.start_time}`);
            console.log(`  Interpreted as Zoned Time (${ianaTimeZone}): ${formatInTimeZone(eventStartDateTimeInTargetTZ, ianaTimeZone, 'yyyy-MM-dd HH:mm:ssXXX')}`);
            console.log(`  Equivalent UTC: ${eventStartDateTimeUtc.toISOString()}`);

        } catch (parseError: any) {
            console.error(`[REMINDERS] Invalid date/time format for event ${event.id}: "${eventStartDateTimeStr}". Error: ${parseError.message}`);
            errorCount++;
            continue;
        }
        
        const reminderTimeInTargetTZ = addMinutes(eventStartDateTimeInTargetTZ, -event.reminder_minutes);

        // –û–∫—Ä—É–≥–ª—è–µ–º –û–ë–ê –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –Ω–∞—á–∞–ª–∞ –º–∏–Ω—É—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Å–µ–∫—É–Ω–¥–∞–º–∏/–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º–∏
        const reminderTimeMinuteStart = new Date(
            reminderTimeInTargetTZ.getFullYear(),
            reminderTimeInTargetTZ.getMonth(),
            reminderTimeInTargetTZ.getDate(),
            reminderTimeInTargetTZ.getHours(),
            reminderTimeInTargetTZ.getMinutes(),
            0, 0 // –æ–±–Ω—É–ª—è–µ–º —Å–µ–∫—É–Ω–¥—ã –∏ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        );
        const currentTimeMinuteStart = new Date(
            currentDateTimeInTargetTZObject.getFullYear(),
            currentDateTimeInTargetTZObject.getMonth(),
            currentDateTimeInTargetTZObject.getDate(),
            currentDateTimeInTargetTZObject.getHours(),
            currentDateTimeInTargetTZObject.getMinutes(),
            0, 0 // –æ–±–Ω—É–ª—è–µ–º —Å–µ–∫—É–Ω–¥—ã –∏ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        );
        
        console.log(`[REMINDERS] Event: "${event.title}" (ID: ${event.id}), Start: ${formatInTimeZone(eventStartDateTimeInTargetTZ, targetTimeZone, 'yyyy-MM-dd HH:mm:ss')}, Reminder should be at: ${formatInTimeZone(reminderTimeMinuteStart, targetTimeZone, 'yyyy-MM-dd HH:mm:ss')}`);

        if (reminderTimeMinuteStart.getTime() === currentTimeMinuteStart.getTime()) {
          console.log(`[REMINDERS] Sending reminder for event: "${event.title}"`);
          const telegramChatId = event.users?.telegram_chat_id;

          if (!telegramChatId) {
            console.warn(`[REMINDERS] Skipping reminder for event ${event.id}: no Telegram chat ID.`);
            errorCount++;
            continue;
          }
          
          const eventDateForDisplay = toDate(parseISO(`${event.event_date}T00:00:00`), {timeZone: targetTimeZone});

          const message = `
üîî <b>Event Reminder!</b>

üìÖ <b>${event.title}</b> is starting in ${event.reminder_minutes} minutes!

‚è∞ <b>Time:</b> ${event.start_time}${event.end_time ? ` - ${event.end_time}` : ""} (${targetTimeZone.split('/')[1] || targetTimeZone})
üóì <b>Date:</b> ${formatInTimeZone(eventDateForDisplay, targetTimeZone, "eeee, MMMM d, yyyy")}${event.location ? `\nüìç <b>Location:</b> ${event.location}` : ""}${event.description ? `\n\nüìù <b>Description:</b> ${event.description}` : ""}

‚ú® <i>Get ready!</i>
          `.trim();

          const telegramResponse = await fetch(
              `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
              {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  chat_id: telegramChatId,
                  text: message,
                  parse_mode: "HTML",
                }),
              }
          );

          if (telegramResponse.ok) {
            console.log(`[REMINDERS] ‚úÖ Reminder sent for event: "${event.title}"`);
            eventsToUpdateReminderSent.push(event.id);
            successCount++;
          } else {
            const errorText = await telegramResponse.text();
            console.error(`[REMINDERS] ‚ùå Failed to send Telegram reminder for event ${event.id}:`, errorText);
            errorCount++;
          }
        }
      } catch (e: any) {
        console.error(`[REMINDERS] Error processing reminder for event ${event.id}:`, e.message, e.stack);
        errorCount++;
      }
    }

    if (eventsToUpdateReminderSent.length > 0) {
      const { error: updateError } = await supabase
        .from("events")
        .update({ reminder_sent: true, updated_at: new Date().toISOString() })
        .in("id", eventsToUpdateReminderSent);

      if (updateError) {
        console.error("[REMINDERS] Error updating reminder_sent flag:", updateError);
      } else {
        console.log(`[REMINDERS] Updated reminder_sent for ${eventsToUpdateReminderSent.length} events.`);
      }
    }

    console.log(`[REMINDERS] ‚úÖ Reminder check completed: ${successCount} reminders sent, ${errorCount} errors during processing.`);
    return NextResponse.json({
      success: true,
      message: `Reminder check completed. Sent: ${successCount}, Errors: ${errorCount}.`,
      successCount,
      errorCount
    });

  } catch (error: any) {
    console.error("‚ùå [REMINDERS] Event reminder check fatal error:", error);
    return NextResponse.json(
        { error: "Internal server error", details: error.message || "Unknown error" },
        { status: 500 },
    );
  }
}
