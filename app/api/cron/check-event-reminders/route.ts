// /app/api/cron/check-event-reminders/route.ts
import { NextResponse } from "next/server";
import { createServiceRoleClient } from "@/lib/supabase-server"; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è
import { formatInTimeZone, addMinutes, parseISO, toDate } from 'date-fns-tz';
// `parseISO` –∏ `toDate` –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã –¥–ª—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ–π —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏.
// `parse` –∏–∑ 'date-fns-tz' (–∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø—Ä–∏–º–µ—Ä–µ) —Ç–æ–∂–µ –ø–æ–¥–æ–π–¥–µ—Ç, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω.

export const dynamic = 'force-dynamic';

export async function GET(request: Request) {
  const CRON_SECRET = process.env.CRON_SECRET;
  const providedSecret = request.headers.get('Authorization')?.replace('Bearer ', '');

  if (CRON_SECRET && providedSecret !== CRON_SECRET) {
    console.warn("Event Reminders Cron: Unauthorized access attempt.");
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  try {
    const supabase = createServiceRoleClient();
    const targetTimeZone = process.env.TARGET_TIMEZONE || 'Europe/Berlin'; // –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ ENV
    console.log(`üîÑ [REMINDERS] Checking for event reminders (target timezone: ${targetTimeZone})...`);

    const nowUtc = new Date(); // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ (UTC)
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ UTC –≤—Ä–µ–º—è –≤ –æ–±—ä–µ–∫—Ç Date, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –≤—Ä–µ–º—è –≤ —Ü–µ–ª–µ–≤–æ–π —Ç–∞–π–º–∑–æ–Ω–µ
    const currentDateTimeInTargetTZObject = toDate(nowUtc, { timeZone: targetTimeZone });

    console.log(`[REMINDERS] Current datetime in ${targetTimeZone}: ${formatInTimeZone(currentDateTimeInTargetTZObject, targetTimeZone, 'yyyy-MM-dd HH:mm:ssXXX')}`);
    console.log(`[REMINDERS] (Server UTC time was: ${nowUtc.toISOString()})`);

    const { data: events, error } = await supabase
      .from("events")
      .select(`
        id,
        title,
        description,
        event_date,
        start_time,
        end_time,
        location,
        reminder_minutes,
        users!inner(telegram_chat_id, reminder_notifications_enabled)
      `)
      .eq("reminder_sent", false)
      .gt("reminder_minutes", 0)
      .not("users.telegram_chat_id", "is", null);
      .eq("users.reminder_notifications_enabled", true);

    if (error) {
      console.error("[REMINDERS] Database error fetching events for reminders:", error);
      return NextResponse.json({ error: "Database error", details: error.message }, { status: 500 });
    }

    if (!events || events.length === 0) {
      console.log("[REMINDERS] No pending reminders to check at this moment.");
      return NextResponse.json({ success: true, message: "No pending reminders." });
    }

    console.log(`[REMINDERS] Found ${events.length} events with pending reminders to evaluate.`);
    let successCount = 0;
    let errorCount = 0;
    const eventsToUpdateReminderSent = [];

    for (const event of events) {
      try {
        // event.event_date (YYYY-MM-DD), event.start_time (HH:MM –∏–ª–∏ HH:MM:SS)
        // –≠—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –∫–∞–∫ –¥–∞—Ç–∞/–≤—Ä–µ–º—è –≤ targetTimeZone
        const eventStartDateTimeStr = `${event.event_date}T${event.start_time}`;
        
        let eventStartDateTimeInTargetTZ: Date;
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å —Å–µ–∫—É–Ω–¥–∞–º–∏, –ø–æ—Ç–æ–º –±–µ–∑, –µ—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ
            if (event.start_time.split(':').length === 3) {
                eventStartDateTimeInTargetTZ = toDate(parseISO(eventStartDateTimeStr), { timeZone: targetTimeZone });
            } else {
                 eventStartDateTimeInTargetTZ = toDate(parseISO(eventStartDateTimeStr + ":00"), { timeZone: targetTimeZone });
            }
           
            if (isNaN(eventStartDateTimeInTargetTZ.getTime())) throw new Error("Parsed date is NaN");

        } catch (parseError: any) {
            console.error(`[REMINDERS] Invalid date/time format for event ${event.id}: "${eventStartDateTimeStr}". Error: ${parseError.message}`);
            errorCount++;
            continue;
        }
        
        const reminderTimeInTargetTZ = addMinutes(eventStartDateTimeInTargetTZ, -event.reminder_minutes);

        // –û–∫—Ä—É–≥–ª—è–µ–º –û–ë–ê –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –Ω–∞—á–∞–ª–∞ –º–∏–Ω—É—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Å–µ–∫—É–Ω–¥–∞–º–∏/–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º–∏
        const reminderTimeMinuteStart = new Date(
            reminderTimeInTargetTZ.getFullYear(),
            reminderTimeInTargetTZ.getMonth(),
            reminderTimeInTargetTZ.getDate(),
            reminderTimeInTargetTZ.getHours(),
            reminderTimeInTargetTZ.getMinutes(),
            0, 0 // –æ–±–Ω—É–ª—è–µ–º —Å–µ–∫—É–Ω–¥—ã –∏ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        );
        const currentTimeMinuteStart = new Date(
            currentDateTimeInTargetTZObject.getFullYear(),
            currentDateTimeInTargetTZObject.getMonth(),
            currentDateTimeInTargetTZObject.getDate(),
            currentDateTimeInTargetTZObject.getHours(),
            currentDateTimeInTargetTZObject.getMinutes(),
            0, 0 // –æ–±–Ω—É–ª—è–µ–º —Å–µ–∫—É–Ω–¥—ã –∏ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        );
        
        console.log(`[REMINDERS] Event: "${event.title}" (ID: ${event.id}), Start: ${formatInTimeZone(eventStartDateTimeInTargetTZ, targetTimeZone, 'yyyy-MM-dd HH:mm:ss')}, Reminder should be at: ${formatInTimeZone(reminderTimeMinuteStart, targetTimeZone, 'yyyy-MM-dd HH:mm:ss')}`);

        if (reminderTimeMinuteStart.getTime() === currentTimeMinuteStart.getTime()) {
          console.log(`[REMINDERS] Sending reminder for event: "${event.title}"`);
          const telegramChatId = event.users?.telegram_chat_id;

          if (!telegramChatId) {
            console.warn(`[REMINDERS] Skipping reminder for event ${event.id}: no Telegram chat ID.`);
            errorCount++;
            continue;
          }
          
          const eventDateForDisplay = toDate(parseISO(`${event.event_date}T00:00:00`), {timeZone: targetTimeZone});

          const message = `
üîî <b>Event Reminder!</b>

üìÖ <b>${event.title}</b> is starting in ${event.reminder_minutes} minutes!

‚è∞ <b>Time:</b> ${event.start_time}${event.end_time ? ` - ${event.end_time}` : ""} (${targetTimeZone.split('/')[1] || targetTimeZone})
üóì <b>Date:</b> ${formatInTimeZone(eventDateForDisplay, targetTimeZone, "eeee, MMMM d, yyyy")}${event.location ? `\nüìç <b>Location:</b> ${event.location}` : ""}${event.description ? `\n\nüìù <b>Description:</b> ${event.description}` : ""}

‚ú® <i>Get ready!</i>
          `.trim();

          const telegramResponse = await fetch(
              `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
              {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  chat_id: telegramChatId,
                  text: message,
                  parse_mode: "HTML",
                }),
              }
          );

          if (telegramResponse.ok) {
            console.log(`[REMINDERS] ‚úÖ Reminder sent for event: "${event.title}"`);
            eventsToUpdateReminderSent.push(event.id);
            successCount++;
          } else {
            const errorText = await telegramResponse.text();
            console.error(`[REMINDERS] ‚ùå Failed to send Telegram reminder for event ${event.id}:`, errorText);
            errorCount++;
          }
        }
      } catch (e: any) {
        console.error(`[REMINDERS] Error processing reminder for event ${event.id}:`, e.message, e.stack);
        errorCount++;
      }
    }

    if (eventsToUpdateReminderSent.length > 0) {
      const { error: updateError } = await supabase
        .from("events")
        .update({ reminder_sent: true, updated_at: new Date().toISOString() })
        .in("id", eventsToUpdateReminderSent);

      if (updateError) {
        console.error("[REMINDERS] Error updating reminder_sent flag:", updateError);
      } else {
        console.log(`[REMINDERS] Updated reminder_sent for ${eventsToUpdateReminderSent.length} events.`);
      }
    }

    console.log(`[REMINDERS] ‚úÖ Reminder check completed: ${successCount} reminders sent, ${errorCount} errors during processing.`);
    return NextResponse.json({
      success: true,
      message: `Reminder check completed. Sent: ${successCount}, Errors: ${errorCount}.`,
      successCount,
      errorCount
    });

  } catch (error: any) {
    console.error("‚ùå [REMINDERS] Event reminder check fatal error:", error);
    return NextResponse.json(
        { error: "Internal server error", details: error.message || "Unknown error" },
        { status: 500 },
    );
  }
}
